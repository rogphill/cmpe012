# Program File: Lab5.asm
# Author: Robert George Phillips (rogphill)
# Email: rogphill@ucsc.edu
# Description: This program converts a single program arg in the form of a number into a 2's complement binary representation.
# Pseudocode:
#
# echo input back to user / additional formatting text
# load address of the argv with offset 0
#
# if (minus symbol) {
#     flag = 1
# } else {
#     val -= 48 //decodes from ASCII
# }
# while (val != '\0') {
#    sum *= 10
#    val -= 48
#    sum += val
# }
#
# if (flag == 1) {
#     sum *= -1 //turns negative if flagged
# }
#
# bitMask = 1000 0000 0000 0000 0000 0000 0000 0000 //a 32-bit mask that we will shift right 
# while (bitmask != all zeroes) {
#     print AND(bitMask, sum) for each bit
#     SRL(bitMask, 1) //shift right logical
# } 

.text
main:
	# Prompts user:
	li $v0, 4 #syscall 4 = print string from $a0
	la $a0, prompt
	syscall
	
	# Loads the stuff stored at address $a1:
	lw $a1, 0($a1)
	
	# Displays program argument back to output:
	move $a0, $a1
	syscall
	
	# Simply prints a new line for formatting using syscall:
	li $v0, 11 # syscall 11 = print character
    	li $a0, 10 # 10 = newline character
    	syscall
    	
    	# Outputs "This number in binary is: \n":
    	li $v0, 4 #syscall 4 = print string from $a0
	la $a0, output
	syscall
	
	# Loads byte stored at new address of $a1 into $s2:
	lb $s2, 0($a1)
	
	# Checks if minus symbol for negatives:
	bne $s2, 45, ifNotMinus
		 
	#If negative number, flag it:
	addi $s7, $s7, 1
	b loop
	
	# Decode the ASCII and store it in a sum register $s3:
	ifNotMinus:
	subi $s3, $s2, 48
	
	# Iterates through byte by byte:
	loop:
		# Adds one to address:
		addi $a1, $a1, 1
	
		# Loads byte stored at new address of $a1, then loads it into $s2 so we can perform comparison:
		lb $s2, 0($a1)
		
		# If the byte is a null terminator, we jump out of the loop
		beqz $s2, endLoop
		
		# Since this byte isn't null terminated, it's a decrementing power of 10. So multiply sum by 10:
		mul $s3, $s3, 10
		
		# Decode the ASCII byte:
		subi $s2, $s2, 48
		
		# Add decoded value to sum register:
		add $s3, $s3, $s2 
		
		j loop
	endLoop:
	
	# Checks flag for negatives. If so, * -1:
	bne $s7, 1, notNegative
	mul $s3, $s3, -1
	
	# Moves decoded integer to $s0:
	notNegative:
	move $s0, $s3
	
	# ***DEBUG*** Print sum: (hope this is okay I left this in)
	# li $v0, 1 #syscall 1 = print integer from $a0
	# move $a0, $s3
	# syscall
    	# ***DEBUG***
    	
    	# Simply prints a new line for formatting using syscall:
	li $v0, 11 # syscall 11 = print character
    	li $a0, 10 # 10 = newline character
    	syscall
    	
    	#Uses a bitmask to reveal binary. Sets syscall to "print character" mode:
    	add $s5, $s5, 0x80000000 # This hex number in binary translates to 1 x 10^31, perfect for our mask
    	li $v0, 11
    	
    	# Bitmask loop: 
    	maskLoop:
    		and $s4, $s0, $s5
    		beqz $s4, zero # If result is 0, the next character is 0
    		
    		# Otherwise, next character is a 1:
		li $a0, 1 # Loads 1, ready for a syscall
		b print
		
		zero:
		li $a0, 0 # Loads 0, ready for a syscall
		
		# Print binary digit:
		print:
		addi $a0, $a0, 48 # Encodes back to ASCII
		syscall
		
		# Loop maintenance:
    		srl $s5, $s5, 1
    		beqz $s5, endMaskLoop # The 1 in the mask will fall off the right side. When this happens, we are done.
    		b maskLoop
    	endMaskLoop:
	
	# Exits program:
	li $v0, 10
	syscall
	
.data
prompt: .asciiz "User input number: \n"
output: .asciiz "This number in binary is: \n"